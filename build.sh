#!/bin/bash -e

# ----- Variables -------------------------------------------------------------
# Variables in the build.properties file will be available to Jenkins
# build steps. Variables local to this script can be defined below.
. ./build.properties
if [ -d build-tools ]; then cd build-tools && git fetch && git stash && git pull && cd ..; else git clone https://github.com/versionone/openAgile-build-tools.git build-tools; fi
source ./build-tools/common.sh


# ---- Produce .NET Metadata --------------------------------------------------

COMPONENTS="APIClient APIClient.Tests"
for COMPONENT_NAME in $COMPONENTS; do
cat > "$WORKSPACE/$COMPONENT_NAME/Properties/AssemblyInfo.cs" <<EOF
// Auto generated by build.sh at `date -u`

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyVersion("$VERSION_NUMBER.$BUILD_NUMBER")]
[assembly: AssemblyFileVersion("$VERSION_NUMBER.$BUILD_NUMBER")]
[assembly: AssemblyInformationalVersion("See $GITHUB_WEB_URL/wiki")]

[assembly: AssemblyProduct("$COMPONENT_NAME")]
[assembly: AssemblyTitle("$PRODUCT_TITLE")]
[assembly: AssemblyDescription("$PRODUCT_NAME $COMPONENT_NAME $Configuration Build")]
[assembly: AssemblyCompany("$ORGANIZATION_NAME")]
[assembly: AssemblyCopyright("Copyright $COPYRIGHT_RANGE, $ORGANIZATION_NAME, Licensed under modified BSD.")]

[assembly: AssemblyConfiguration("$Configuration")]
EOF
done


# ---- Clean solution ---------------------------------------------------------

rm -rf $WORKSPACE/$MAIN_DIR/*.nupkg
MSBuild.exe $SOLUTION_FILE -m -t:Clean

nuget_packages_refresh

# ---- Build solution using msbuild -------------------------------------------

WIN_SIGNING_KEY="`winpath "$SIGNING_KEY"`"
MSBuild.exe $SOLUTION_FILE \
  -p:DownloadNuGetExe=true \
  -p:SignAssembly=$SIGN_ASSEMBLY \
  -p:AssemblyOriginatorKeyFile=$WIN_SIGNING_KEY \
  -p:RequireRestoreConsent=false \
  -p:Configuration="$Configuration" \
  -p:Platform="$Platform" \
  -p:Verbosity=Diagnostic



# ---- Run Tests --------------------------------------------------------------------------

# Make sure the nunit-console is available first...
NUNIT_CONSOLE_RUNNER=`/usr/bin/find packages | grep "${NUNIT_RUNNER_NAME}\$"`
if [ -z "$NUNIT_CONSOLE_RUNNER" ]
then
  echo "Could not find $NUNIT_RUNNER_NAME in the $WORKSPACE/packages folder."
  exit -1
fi

if [ -z "$NUNIT_XML_OUTPUT" ]
then
  NUNIT_XML_OUTPUT="nunit-result.xml"
fi

if [ -e /etc/bash.bashrc ] ; then
  # Cygwin specific settings
  $NUNIT_CONSOLE_RUNNER \
    -framework:net-4.0 \
    -labels \
    -stoponerror \
    -xml=$NUNIT_XML_OUTPUT \
    `winpath "$WORKSPACE/$TEST_DIR/bin/$Configuration/$TEST_DLL"`
else
  # Msysgit specific settings
  $NUNIT_CONSOLE_RUNNER \
    //framework:net-4.0 \
    //labels \
    //stoponerror \
    //xml=$NUNIT_XML_OUTPUT \
    `winpath "$WORKSPACE/$TEST_DIR/bin/$Configuration/$TEST_DLL"`
fi



# ---- Produce NuGet .nupkg file ----------------------------------------------------------
cd $WORKSPACE/$MAIN_DIR
$WORKSPACE/.nuget/NuGet.exe pack $MAIN_CSPROJ -Symbols -prop Configuration=$Configuration
cd $WORKSPACE