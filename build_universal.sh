
set -e


# This file must be updated by hand when you wish to bump the version number.
# The build script files will use these values in the build process

MAJOR=12
MINOR=3
REVISION=0




# -------------------------------------------------------------------------

function winpath() {
	#handles drive letters; incurrs process creation penalty for sed
	echo "$1" | sed -e 's|^/\(\w\)/|\1:\\|g;s|/|\\|g'
}

# If we aren't running under jenkins. some variables will be unset.
# So set them to a reasonable value

function parentwith() {  # used to find $WORKSPACE, below.
  #Starting at the current dir and progressing up the ancestors,
  #retuns the first dir containing $1. If not found returns pwd.
  SEARCHTERM="$1"
  DIR=`pwd`
  while [ ! -e "$DIR/$SEARCHTERM" ] 
    do
    NEWDIR=`dirname "$DIR"`
    if [ "$NEWDIR" = "$DIR" ]
      then
      pwd
      return
      fi
    DIR="$NEWDIR"
    done
  echo "$DIR"
  }

if [ -z "$BUILD_NUMBER" ]; then
  export REVISION=`date +%y%j`
  export BUILD_NUMBER=`date +%H%M`
fi
if [ -z "$WORKSPACE" ]; then export WORKSPACE=`parentwith .git`; fi
if [ -z "$SIGNING_KEY_DIR" ]; then export SIGNING_KEY_DIR=`pwd`; echo "Please plase VersionOne.snk in `pwd` for signing."; fi



export BUILDTOOLS_PATH="$WORKSPACE/GetBuildTools"
if [ ! -d "$BUILDTOOLS_PATH" ]; then
  export BUILDTOOLS_PATH="$WORKSPACE/../v1_build_tools"
fi

export DOTNET_PATH="/c/Windows/Microsoft.Net/Framework/v4.0.30319"

export PATH="$PATH:$BUILDTOOLS_PATH/bin:$DOTNET_PATH"

export Configuration="Release"
export Platform="AnyCPU"
export SIGN_ASSEMBLY="true"
export SIGNING_KEY="$SIGNING_KEY_DIR/VersionOne.snk"

export NUGET_API_KEY="7df1856b-7448-4d94-bffd-6d8585fc1826"
export MYGET_API_KEY="05c7fd08-2673-411f-90fb-c794e632f32d"
export MYGET_REPO_URL="http://www.myget.org/F/versionone/api/v2/package"
export EnableNugetPackageRestore="true"


function update_nuget_deps() {
  PKGSCONFIG="${1:-packages.config}"
  PKGSDIRW=`winpath "$WORKSPACE/packages"`
  if [ -f $PACKAGES_CONFIG ]
  then
    PKGSCONFIGW=`winpath "${PKGSCONFIG}"`
    NuGet.exe install $PKGSCONFIGW -o $PKGSDIRW -Source "http://packages.nuget.org/api/v2/;http://www.myget.org/F/versionone/" 
    NuGet.exe update $PKGSCONFIGW -Verbose -Source "http://packages.nuget.org/api/v2/;http://www.myget.org/F/versionone/"
  fi
}




# ---- Produce .NET Metadata --------------------------------------------------------------

APICLIENT_PROPS_DIR="$WORKSPACE/APIClient/Properties"
TESTS_PROPS_DIR="$WORKSPACE/APIClient.Tests/Properties"

mkdir -p "$APICLIENT_PROPS_DIR"
cat > "$APICLIENT_PROPS_DIR/AssemblyInfo.cs" <<EOF
// Auto generated by build_universal.sh at `date -u`

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


[assembly: AssemblyVersion("$MAJOR.$MINOR.$REVISION.$BUILD_NUMBER")]
[assembly: AssemblyFileVersion("$MAJOR.$MINOR.$REVISION.$BUILD_NUMBER")]
[assembly: AssemblyInformationalVersion("See https://github.com/versionone/VersionOne.SDK.NET.APIClient/wiki")]

[assembly: AssemblyDescription("VersionOne SDK .NET API Client Release Build")]
[assembly: AssemblyCompany("VersionOne, Inc")]
[assembly: AssemblyProduct("VersionOne.SDK.APIClient")]
[assembly: AssemblyTitle("VersionOne SDK API Client")]
[assembly: AssemblyCopyright("Copyright 2012, VersionOne, Inc. Licensed under modified BSD.")]

[assembly: AssemblyConfiguration("Release")]

EOF

mkdir -p "$TESTS_PROPS_DIR"
cat > "$TESTS_PROPS_DIR/AssemblyInfo.cs" <<EOF
// Auto generated by build_universal.sh at `date -u`

using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyVersion("$MAJOR.$MINOR.$REVISION.$BUILD_NUMBER")]
[assembly: AssemblyFileVersion("$MAJOR.$MINOR.$REVISION.$BUILD_NUMBER")]
[assembly: AssemblyInformationalVersion("12.2.1.3588 Summer 2012")]

[assembly: AssemblyDescription("VersionOne SDK .NET API Client Tests Release Build")]
[assembly: AssemblyCompany("VersionOne, Inc")]
[assembly: AssemblyProduct("VersionOne.SDK.APIClient.Tests")]
[assembly: AssemblyTitle("VersionOne SDK API Client Tests")]
[assembly: AssemblyCopyright("Copyright 2012, VersionOne, Inc. Licensed under modified BSD.")]

[assembly: AssemblyConfiguration("Release")]

EOF



# ---- Build API Client using msbuild -----------------------------------------------------



cd $WORKSPACE/APIClient

MSBuild.exe VersionOne.SDK.APIClient.csproj
# \
#   /p:SignAssembly=$SIGN_ASSEMBLY \
#   /p:AssemblyOriginatorKeyFile=`winpath "$SIGNING_KEY"`





# ---- Produce NuGet .nupkg file ----------------------------------------------------------
rm -rf *.nupkg
NuGet.exe pack VersionOne.SDK.APIClient.csproj -Symbols -prop Configuration=Release





# ---- Build Tests ------------------------------------------------------------------------

cd $WORKSPACE/APIClient.Tests

update_nuget_deps  # this also gets the nunit runner used below

MSBuild.exe VersionOne.SDK.APIClient.Tests.csproj 
# \
#   /p:SignAssembly=$SIGN_ASSEMBLY \
#   /p:AssemblyOriginatorKeyFile=`winpath "$SIGNING_KEY"`




# ---- Run Tests --------------------------------------------------------------------------

cd $WORKSPACE
# Make sure the nunit-console is available first...
NUNIT_CONSOLE_RUNNER=`/usr/bin/find packages | grep 'nunit-console.exe$'`
if [ -z "$NUNIT_CONSOLE_RUNNER" ]
then
	echo "Could not find nunit-console.exe in the packages folder."
	exit -1
fi

$NUNIT_CONSOLE_RUNNER \
  //framework:net-4.0 \
  //labels \
  //stoponerror \
  //xml=nunit-objmodel-result.xml \
  `winpath "${WORKSPACE}/APIClient.Tests/bin/Release/VersionOne.SDK.APIClient.Tests.dll"`





# ---- publish nuget package to local repo -----------------------------------------------

cd APIClient

for PKG in `ls *.nupkg`
do
  echo "Pushing $PKG"
  NuGet.exe push `winpath "$PKG"` $MYGET_API_KEY -Source "$MYGET_REPO_URL"
done